name: Deploy to Pivotal Cloud Foundry

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: cf_static_server

jobs:
  # Run tests.
  # See also https  ://docs.docker.com/docker-hub/builds/automated-testing/
  docker-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  docker-push:
    # Ensure test job passes before pushing image.
    needs: docker-test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      # - name: Push images and caches into Github Docker Registry
      #   uses: whoan/docker-build-with-cache-action@v2
      #   with:
      #     username: ${{ secrets.GITHUB_DOCKER_LOGIN }}
      #     password: ${{ secrets.GITHUB_DOCKER_TOKEN }}
      #     image_name: ${{ github.repository }}/$IMAGE_NAME
      #     image_tag: latest
      #     registry: docker.pkg.github.com
      #     build_extra_args: "--compress=true"
      # - name: Log into Docker Hub registry
      #   run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      - name: Push images and caches into Github Docker Registry
        uses: whoan/docker-build-with-cache-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          image_name: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          image_tag: latest

  # Push App to Pivotal Cloud Foundry.
  # See also https://docs.cloudfoundry.org/buildpacks/binary/index.html
  cf-push:
    # env:
    #   CF_DOCKER_PASSWORD: ${{ secrets.GITHUB_DOCKER_TOKEN }}
    # Ensure Docker image is pushed before pushing to Cloud Foundry.
    needs: [docker-test, docker-push]

    runs-on: windows-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      # - name: Log into Github Packages registry
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Log into Pivotal Cloud Foundry
        run: |
          cf api https://api.run.pivotal.io
          cf auth ${{ secrets.PCF_USERNAME }} ${{ secrets.PCF_PASSWORD }}
          cf target -o interlinear.bible -s development
      - name: Update Cloud Foundry App
        # run: cf push interlinear-bible --docker-image docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:latest --docker-username secrets.GITHUB_DOCKER_LOGIN
        run: cf push interlinear-bible --docker-image ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

  #     - name: Push image
  #       run: |
  #         declare -l IMAGE_ID
  #         IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=latest
  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION
  #         docker tag image $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
  #     - name: Putting IMAGE_ID in an artifact
  #       run: |
  #         mkdir docker-image
  #         echo "$IMAGE_ID:$VERSION" > docker-image/docker-image.txt
  #     - name: Upload docker-image.txt for CF push job
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: docker-image
  #         path: docker-image/docker-image.txt
